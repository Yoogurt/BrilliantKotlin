/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.thumb.instruction16

import brilliant.arm.OpCode.factory.OpUtil.getShiftInt
import brilliant.arm.OpCode.factory.OpUtil.parseRegister
import brilliant.arm.OpCode.factory.OpUtil
import brilliant.arm.OpCode.thumb.instruction16.support.ParseSupport
import brilliant.elf.vm.Register

class ADD_A8_310 : ParseSupport() {

    override fun parse(data: Int): String {

        var head = getShiftInt(data, 9, 7)
        if (head == 12)
            return super.parse(data)

        head = getShiftInt(data, 8, 8)
        if (head == 68)
            return EncodingT2(data)

        return error(data)
    }

    private fun EncodingT2(data: Int): String {
        val DN = getShiftInt(data, 7, 1)
        val Rm = getShiftInt(data, 3, 4)
        val Rdn = getShiftInt(data, 0, 3)

        val Rd = DN shl 3 or Rdn

        val sb = StringBuilder("ADD ")
        sb.append(parseRegister(Rd)).append(" , ")
        sb.append(parseRegister(Rm))

        if (Rm == OpUtil.PC)
            if (Register.PC > 0)
                sb.append(" @" + Integer.toHexString(Register.PC))

        return sb.toString()
    }

    override fun getOpCode(data: Int): String? {
        return "ADDS"
    }

    override fun getRn(data: Int): String? {
        return parseRegister(getShiftInt(data, 0, 3))
    }

    override fun getRm(data: Int): String? {
        return (parseRegister(getShiftInt(data, 3, 3)) + " , "
                + parseRegister(getShiftInt(data, 6, 3)))
    }

    override fun performExecuteCommand(data: Int) {}

    companion object {

        val INSTANCE = ADD_A8_310()
    }

}
