/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.thumb.instruction16

import brilliant.arm.OpCode.factory.OpUtil.getShiftInt
import brilliant.arm.OpCode.factory.OpUtil.parseRegister
import brilliant.arm.OpCode.thumb.instruction16.support.ParseSupport

class STR_A8_672 : ParseSupport() {

    override fun parse(data: Int): String {

        val head = getShiftInt(data, 11, 5)
        if (head == 12)
            return EncodingT1(data)

        if (head == 18)
            return EncodingT2(data)

        return error(data)

    }

    private fun EncodingT2(data: Int): String {
        val Rt = getShiftInt(data, 8, 3)
        val imm8 = getShiftInt(data, 0, 8)

        val sb = StringBuilder("STR ")
        sb.append(parseRegister(Rt))
        sb.append(" , [SP , #").append(imm8 shl 2).append("]")

        return sb.toString()
    }

    private fun EncodingT1(data: Int): String {

        val sb = StringBuilder("STR ")

        val imm = getShiftInt(data, 6, 5)
        sb.append(parseRegister(getShiftInt(data, 0, 3))).append(" , [")

        if (imm > 0)
            sb.append(parseRegister(getShiftInt(data, 3, 3)) + " , #"
                    + (imm shl 2))
        else
            sb.append(parseRegister(getShiftInt(data, 3, 3)))

        sb.append("]")
        return sb.toString()
    }

    override fun performExecuteCommand(data: Int) {}

    companion object {

        val INSTANCE = STR_A8_672()
    }

}
