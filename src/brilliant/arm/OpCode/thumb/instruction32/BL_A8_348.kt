/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.thumb.instruction32

import brilliant.arm.OpCode.factory.OpUtil.getShiftInt
import brilliant.arm.OpCode.factory.OpUtil.signExtend
import brilliant.arm.OpCode.thumb.instruction32.support.ParseSupport

class BL_A8_348 : ParseSupport() {

    override fun parse(data: Int): String {
        val type = getShiftInt(data, 12, 1)
        if (type == 0)
            return EncodingT2(data)
        return EncodingT1(data)
    }

    private fun EncodingT2(data: Int): String {

        if (getShiftInt(data, 0, 1) == 1)
            return error(data)

        val sb = StringBuilder("BLX.W #")
        val S = getShiftInt(data, 26, 1)
        val I1 = (getShiftInt(data, 13, 1) xor S).inv() and 1
        val I2 = (getShiftInt(data, 11, 1) xor S).inv() and 1
        val imm10H = getShiftInt(data, 16, 10)
        val imm10L = getShiftInt(data, 1, 10)
        sb.append(signExtend(S shl 24 or (I1 shl 23) or (I2 shl 22) or (imm10H shl 12) or (imm10L shl 2), 25))

        return sb.toString()
    }

    private fun EncodingT1(data: Int): String {
        return super.parse(data)
    }

    override fun getOpCode(data: Int): String? {
        return "BL"
    }

    override fun getShift(data: Int): Int {
        val S = getShiftInt(data, 26, 1)
        val I1 = (getShiftInt(data, 13, 1) xor S).inv()
        val I2 = (getShiftInt(data, 11, 1) xor S).inv()
        val imm10 = getShiftInt(data, 16, 10)
        val imm11 = getShiftInt(data, 0, 11)
        return signExtend(S shl 24 or (I1 shl 23) or (I2 shl 22) or (imm10 shl 12) or (imm11 shl 1), 25)
    }

    override fun performExecuteCommand(data: Int) {}

    companion object {

        val INSTANCE = BL_A8_348()
    }

}