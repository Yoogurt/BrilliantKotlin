/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.thumb.instruction32

import brilliant.arm.OpCode.factory.OpUtil.getShiftInt
import brilliant.arm.OpCode.factory.OpUtil.parseRegister
import brilliant.arm.OpCode.thumb.instruction32.support.ParseSupport

class STRH_A8_698 : ParseSupport() {

    override fun parse(data: Int): String {
        val type = getShiftInt(data, 23, 1)

        if (type == 1)
            return EncodingT2(data)
        else
            return EncodingT3(data)
    }

    private fun EncodingT3(data: Int): String {
        val sb = StringBuilder("STRH.W ")

        val Rt = getShiftInt(data, 12, 4)
        val Rn = getShiftInt(data, 16, 4)
        val imm8 = getShiftInt(data, 0, 8)

        val index = getShiftInt(data, 10, 1) == 1
        val add = getShiftInt(data, 9, 1) == 1
        val wback = getShiftInt(data, 8, 1) == 1

        sb.append(parseRegister(Rt)).append(" , [")
        sb.append(parseRegister(Rn))

        if (!index)
            sb.append("] , ")
        else
            sb.append(" , ")

        if (!add)
            sb.append("-")

        sb.append("#")
        sb.append(imm8)

        if (index)
            sb.append("]")

        if (wback)
            sb.append("!")

        return sb.toString()
    }

    private fun EncodingT2(data: Int): String {

        val sb = StringBuilder("STRH.W ")

        val Rt = getShiftInt(data, 12, 4)
        val Rn = getShiftInt(data, 16, 4)
        val imm12 = getShiftInt(data, 0, 12)
        sb.append(parseRegister(Rt))
        sb.append(" , [")
        sb.append(parseRegister(Rn))
        sb.append(" , #")
        sb.append(imm12)
        sb.append("]")

        return sb.toString()
    }

    override fun performExecuteCommand(data: Int) {}

    companion object {

        val INSTANCE = STRH_A8_698()
    }

}