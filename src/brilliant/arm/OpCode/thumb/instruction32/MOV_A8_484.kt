/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.thumb.instruction32

import brilliant.arm.OpCode.factory.OpUtil.getShiftInt
import brilliant.arm.OpCode.factory.OpUtil.parseRegister
import brilliant.arm.OpCode.factory.OpUtil.thumbExpandImm
import brilliant.arm.OpCode.thumb.instruction32.support.ParseSupport

class MOV_A8_484 : ParseSupport() {

    override fun parse(data: Int): String {

        val type = getShiftInt(data, 25, 1)
        if (type == 0)
            return super.parse(data)
        return EncodingT3(data)
    }

    private fun EncodingT3(data: Int): String {

        val sb = StringBuilder("MOVW")
        sb.append(" ")
        val Rd = getShiftInt(data, 8, 4)
        val imm16 = getShiftInt(data, 16, 4) shl 12 or (getShiftInt(data, 26, 1) shl 11) or (getShiftInt(data, 12, 3) shl 8) or getShiftInt(data, 0, 8)

        sb.append(parseRegister(Rd))
        sb.append(" , #")
        sb.append(imm16)

        return sb.toString()
    }

    override fun getOpCode(data: Int): String? {
        return "MOV"
    }

    override fun getRd(data: Int): Int {
        return getShiftInt(data, 8, 4)
    }

    override fun getS(data: Int): Int {
        return getShiftInt(data, 20, 1)
    }

    override fun getShift(data: Int): Int {
        return thumbExpandImm(getShiftInt(data, 26, 1) shl 11 or (getShiftInt(data, 12, 3) shl 8) or getShiftInt(data, 0, 8))
    }

    override fun performExecuteCommand(data: Int) {}

    companion object {

        val INSTANCE = MOV_A8_484()
    }

}