/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.thumb.instruction32

import brilliant.arm.OpCode.factory.OpUtil.getShiftInt
import brilliant.arm.OpCode.factory.OpUtil.parseRegister
import brilliant.arm.OpCode.thumb.instruction32.support.ParseSupport

class ADR_A8_322 : ParseSupport() {

    override fun parse(data: Int): String {

        val type = getShiftInt(data, 21, 5)
        if (type == 21)
            return EncodingT2(data)

        if (type == 16)
            return EncodingT3(data)

        return error(data)
    }

    private fun EncodingT3(data: Int): String {
        val Rd = getShiftInt(data, 8, 4)
        val imm12 = getShiftInt(data, 26, 1) shl 11 or (getShiftInt(data, 12, 3) shl 8) or getShiftInt(data, 0, 8)
        val sb = StringBuilder("ADR.W ")
        sb.append(parseRegister(Rd))
        sb.append(" , #")
        sb.append(imm12)

        return sb.toString()
    }

    private fun EncodingT2(data: Int): String {

        val Rd = getShiftInt(data, 8, 4)
        val imm12 = getShiftInt(data, 26, 1) shl 11 or (getShiftInt(data, 12, 3) shl 8) or getShiftInt(data, 0, 8)
        val sb = StringBuilder("ADR.W ")
        sb.append(parseRegister(Rd))
        sb.append(" , #-")
        sb.append(imm12)

        return sb.toString()
    }

    override fun performExecuteCommand(data: Int) {}

    companion object {

        val INSTANCE = ADR_A8_322()
    }

}