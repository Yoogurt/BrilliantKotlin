/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.arm.instruction

import brilliant.arm.OpCode.factory.OpUtil.getShiftInt
import brilliant.arm.OpCode.factory.OpUtil.parseRegister

import brilliant.arm.OpCode.arm.instruction.support.ParseSupport
import brilliant.arm.OpCode.factory.CondFactory

class LDRSBT_A8_456 : ParseSupport() {

    override fun parse(data: Int): String? {
        val bit22 = getShiftInt(data, 22, 1)
        if (bit22 == 1)
            return super.parse(data)
        else
            return EncodingA2(data)
    }

    override fun getRd(data: Int): Int {
        return getShiftInt(data, 12, 4)
    }

    override fun getRn(data: Int): Int {
        return getShiftInt(data, 16, 4)
    }

    override fun getShift(data: Int): Int {
        val add = getShiftInt(data, 23, 1)
        val imm8 = getShiftInt(data, 8, 4) shl 4 or getShiftInt(data, 0, 4)
        if (add == 1)
            return imm8
        else
            return -imm8
    }

    protected override val isRnMemory: Boolean
        get() = true

    private fun EncodingA2(data: Int): String {
        val sb = StringBuilder("LDRSBT")
        val Rt = getRd(data)
        val Rn = getRn(data)
        val Rm = getShiftInt(data, 0, 4)
        val add = getShiftInt(data, 23, 1) == 1

        sb.append(CondFactory.parse(getCond(data)))

        sb.append(" ")
        sb.append(parseRegister(Rt))

        sb.append(" , [")
        sb.append(parseRegister(Rn))
        sb.append("] , ")

        if (!add)
            sb.append("-")

        sb.append(parseRegister(Rm))

        return sb.toString()
    }

    override fun performExecuteCommand(data: Int) {}

    companion object {

        val INSTANCE = LDRSBT_A8_456()
    }


}