/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.arm.instruction

import brilliant.arm.OpCode.factory.OpUtil.getShiftInt
import brilliant.arm.OpCode.factory.OpUtil.signExtend
import brilliant.arm.OpCode.arm.instruction.support.ParseSupport
import brilliant.arm.OpCode.factory.CondFactory
import brilliant.arm.OpCode.factory.Remotable

class BL_A8_348 : ParseSupport(), Remotable {

    override fun parse(data: Int): String {

        val cond = getShiftInt(data, 28, 4)
        if (cond != 15)
            return EncodingA1(data)

        return EncodingA2(data)
    }

    private fun EncodingA1(data: Int): String {
        val sb = StringBuilder("BL")
        sb.append(CondFactory.parse(getCond(data)))
        sb.append(" #")

        val imm24 = getShiftInt(data, 0, 24)

        sb.append(signExtend(imm24 shl 2, 24))

        return sb.toString()
    }

    private fun EncodingA2(data: Int): String {
        val sb = StringBuilder("BLX")

        val H = getShiftInt(data, 24, 1)
        val imm24 = getShiftInt(data, 0, 24)
        sb.append(" #")

        sb.append(imm24 shl 2 or (H shl 1) or 0)

        return sb.toString()
    }

    override fun performExecuteCommand(data: Int) {}

    override fun offset(data: Int): Int {
        val cond = getShiftInt(data, 28, 4)
        if (cond != 15)
            return remoteValueA1(data)

        return remoteValueA2(data)
    }

    private fun remoteValueA2(data: Int): Int {
        return signExtend(getShiftInt(data, 0, 24) shl 2, 24)
    }

    private fun remoteValueA1(data: Int): Int {
        return getShiftInt(data, 0, 24) shl 2 or (getShiftInt(data, 24, 1) shl 1) or 0
    }

    companion object {

        val INSTANCE = BL_A8_348()
    }

}