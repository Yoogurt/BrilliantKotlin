/*-------------------------------
 Auto Generated By AutoGenetate.java
     Don't remove or modify
        License GPL/GNU
-------------------------------*/
package brilliant.arm.OpCode.arm.instruction

import brilliant.arm.OpCode.factory.OpUtil.armExpandImm
import brilliant.arm.OpCode.factory.OpUtil.getShiftInt
import brilliant.arm.OpCode.arm.instruction.support.ParseSupport
import brilliant.arm.OpCode.factory.Remotable
import brilliant.elf.vm.Register

class ADR_A8_322 : ParseSupport(), Remotable {

    override fun getOpCode(data: Int): String {
        return "ADR"
    }

    override fun getRd(data: Int): Int {
        return getShiftInt(data, 12, 4)
    }

    override fun getRn(data: Int): Int {
        return getShiftInt(data, 16, 4)
    }

    override fun getRm(data: Int): Int {
        return -1
    }

    override fun getS(data: Int): Int {
        return getShiftInt(data, 20, 1)
    }

    override fun getType(data: Int): Int {
        return -1
    }

    override fun getShift(data: Int): Int {
        val before = getShiftInt(data, 21, 4) == 2
        return if (before) -armExpandImm(getShiftInt(data, 0, 12)) else armExpandImm(getShiftInt(data, 0, 12))
    }

    override fun getCommnet(data: Int): String? {
        if (Register.PC >= 0)
            return " @" + Integer.toHexString(Register.PC)
        return super.getCommnet(data)
    }

    override fun performExecuteCommand(data: Int) {}

    override fun offset(data: Int): Int {
        val before = getShiftInt(data, 21, 4) == 2
        return if (before) -armExpandImm(getShiftInt(data, 0, 12)) else armExpandImm(getShiftInt(data, 0, 12))
    }

    companion object {

        val INSTANCE = ADR_A8_322()
    }

}